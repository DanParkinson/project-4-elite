            # Set the reservation end time to enforce a 1 hour 45 minute buffer
            end_time = new_datetime + timedelta(hours=1, minutes=45)
                    # Check for overlapping reservations within the buffer period
            if check_overlapping_reservations(new_date, new_datetime, end_time):
                # Generate all possible times for the restaurant's open hours on the selected day
                all_times = generate_all_times(new_datetime)
                # Filter available times by removing those that overlap with existing reservations
                available_times = filter_available_times(all_times, new_date)
                # If available times tell the user the 3 nearest times either side of chosen time
                if available_times:
                    # only shows three times either side of reservation time
                    available_times = get_available_times_slice(available_times, new_time)
                    # Inform the user that their chosen time is unavailable
                    form.add_error(None, "The chosen time is unavailable. Please see the nearest available times below:")
                else:
                    form.add_error(None, "There are no available times for this date")
            else:
                form.save()
                return redirect('my_reservations')
    else:
        # prepopulate the forms information if not post
        form = ReservationForm(instance = reservation)
        # convert time field into a string for ChoiceField for prepopulating the form
        # this dosent work 
        if reservation.reservation_time:
            reservation_time_str = reservation.reservation_time.strftime("%H:%M")
            form.fields['reservation_time'].initial = reservation_time_str

    return render(request, 'reservations/edit_reservation.html',{
        'form' : form,
        'available_times' : available_times,
        'reservation' : reservation,
    })